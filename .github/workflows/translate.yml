name: Weekly Translation

on:
  schedule:
    - cron: '0 2 * * 1'  # 每周一的 UTC 凌晨 2 点执行（北京时间周一上午 10 点）
  workflow_dispatch:     # 允许手动触发

jobs:
  translate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install deep-translator

    - name: Create translation script
      run: |
        cat << 'EOF' > translator.py
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        from deep_translator import GoogleTranslator
        import re, os, sys

        def is_chinese(text):
            return bool(re.search(r'[\u4e00-\u9fff]', text))

        def translate_text(text, target_lang):
            try:
                return GoogleTranslator(source='zh-CN', target=target_lang).translate(text)
            except Exception as e:
                print(f"Translation error: {e}")
                return text

        def translate_line_preserving_variables(line, target_lang):
            def repl(match):
                full_string = match.group(0)
                quote = full_string[0]
                content = full_string[1:-1]
                parts = re.split(r'(\$\{?\w+\}?)', content)
                translated_parts = [translate_text(p, target_lang) if is_chinese(p) else p for p in parts]
                return quote + ''.join(translated_parts) + quote
            return re.sub(r'(?:\'[^\']*\'|"[^"]*")', repl, line)

        def translate_file(input_file, output_file, target_lang):
            with open(input_file, 'r', encoding='utf-8') as f_in, \
                 open(output_file, 'w', encoding='utf-8') as f_out:
                for line in f_in:
                    leading_space = re.match(r'^(\s*)', line).group(1)
                    stripped = line.strip()
                    if stripped.startswith('#') and is_chinese(stripped):
                        comment_text = stripped[1:].strip()
                        translated = translate_text(comment_text, target_lang)
                        f_out.write(f"{leading_space}# {translated}\n")
                    elif any(cmd in stripped for cmd in ['echo', 'read', 'send_stats']) and is_chinese(stripped):
                        translated_line = translate_line_preserving_variables(line, target_lang)
                        f_out.write(translated_line)
                    else:
                        f_out.write(line)

        if __name__ == '__main__':
            input_file = sys.argv[1]
            lang_map = {'en': 'en', 'tw': 'zh-TW', 'kr': 'ko', 'jp': 'ja'}
            for folder, lang_code in lang_map.items():
                os.makedirs(folder, exist_ok=True)
                output_path = os.path.join(folder, os.path.basename(input_file))
                translate_file(input_file, output_path, lang_code)
        EOF

    - name: Run translation script
      run: python translator.py kejilion.sh

    - name: Commit and push translations
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: '🔁 Weekly translation update'
        file_pattern: 'en/kejilion.sh tw/kejilion.sh kr/kejilion.sh jp/kejilion.sh'
